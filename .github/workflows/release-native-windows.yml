name: Release native windows version
on: 
  push:
    branches: "quarkus-release/**"
jobs:
  build-windows-kafka-eureka:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Configure Pagefile
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '17'
          components: 'native-image'
      - name: Build testserver
        run: |
          cd testserver
          docker build -t testserver .
      - name: Get release number
        id: get-id
        shell: pwsh
        run: |
          $id='${{github.ref_name}}'.split('/')[1]
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        shell: pwsh
        run: |
          cd BrokerParent
          $id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-windows-with-eureka-with-kafka
        run: |
          del .\BrokerParent\pom.xml
          move .\BrokerParent\build-pom.xml .\BrokerParent\pom.xml
          mvn clean package -Pkafka -Dnative -Deureka -Dkafka -Dos=windows -D"quarkus.profile"=kafka-eureka 
      - name: docker build
        run: |
          cd AllInOneRunner
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=all-in-one-runner-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-all-in-one-runner.exe -t scorpiobroker/all-in-one-runner:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
          cd ..
          cd HistoryManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=history-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-history-manager.exe -t scorpiobroker/history-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
          cd ..
          cd RegistrySubscriptionManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=registry-subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-registry-subscription-manager.exe -t scorpiobroker/registry-subscription-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
          cd ..
          cd RegistryManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=registry-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-registry-manager.exe -t scorpiobroker/registry-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
          cd ..
          cd SubscriptionManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-subscription-manager.exe -t scorpiobroker/subscription-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
          cd ..
          cd QueryManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=query-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-query-manager.exe -t scorpiobroker/query-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
          cd ..
          cd EntityManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=entity-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-entity-manager.exe -t scorpiobroker/entity-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} .
      - name: docker tag
        run: |
          docker tag scorpiobroker/history-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/history-manager:windows-kafka-eureka-latest
          docker tag scorpiobroker/registry-subscription-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/registry-subscription-manager:windows-kafka-eureka-latest
          docker tag scorpiobroker/registry-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/registry-manager:windows-kafka-eureka-latest
          docker tag scorpiobroker/subscription-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/subscription-manager:windows-kafka-eureka-latest
          docker tag scorpiobroker/query-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/query-manager:windows-kafka-eureka-latest
          docker tag scorpiobroker/entity-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/entity-manager:windows-kafka-eureka-latest
          docker tag scorpiobroker/all-in-one-runner:windows-kafka-eureka-${{steps.get-id.outputs.id}} scorpiobroker/all-in-one-runner:windows-kafka-eureka-latest
      - name: start docker aaio 
        run: |
          docker-compose -f ./compose-files/docker-compose-windows-aaio-kafka-eureka-test.yml up &
          sleep 120
      - name: newman action
        uses: matt-ball/newman-action@master
        with:
          collection: api-test.json
          environment: api-test-environment.json
      - name: Stopping Scorpio 
        run: docker-compose -f ./compose-files/docker-compose-windows-aaio-kafka-eureka-test.yml down
      - name: start docker dist 
        run: |
          docker-compose -f ./compose-files/docker-compose-windows-dist-kafka-eureka-test.yml up &
          sleep 120
      - name: newman action
        uses: matt-ball/newman-action@master
        with:
          collection: api-test.json
          environment: api-test-environment.json
      - name: Stopping Scorpio 
        run: docker-compose -f ./compose-files/docker-compose-windows-dist-kafka-eureka-test.yml down
      - name: docker-login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: docker push
        run: |
          docker push scorpiobroker/history-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/registry-subscription-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/registry-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/subscription-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/query-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/entity-manager:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/all-in-one-runner:windows-kafka-eureka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/history-manager:windows-kafka-eureka-latest
          docker push scorpiobroker/registry-subscription-manager:windows-kafka-eureka-latest
          docker push scorpiobroker/registry-manager:windows-kafka-eureka-latest
          docker push scorpiobroker/subscription-manager:windows-kafka-eureka-latest
          docker push scorpiobroker/query-manager:windows-kafka-eureka-latest
          docker push scorpiobroker/entity-manager:windows-kafka-eureka-latest
          docker push scorpiobroker/all-in-one-runner:windows-kafka-eureka-latest
      - name: Create Release ${{steps.get-id.outputs.id}}-windows-kafka-eureka
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-windows-kafka-eureka
          release_name: ${{steps.get-id.outputs.id}}-windows-kafka-eureka
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release aaio
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./AllInOneRunner/target/all-in-one-runner-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-all-in-one-runner.exe
          asset_content_type: application/octet-stream
      - name: Upload Release history-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryManager/target/history-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-history-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release registry-subscription-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistrySubscriptionManager/target/registry-subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-registry-subscription-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release registry-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistryManager/target/registry-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-registry-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release subscription-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SubscriptionManager/target/subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-subscription-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release query-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./QueryManager/target/query-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-query-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./EntityManager/target/entity-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-entity-manager.exe
          asset_content_type: application/octet-stream
  build-windows-kafka:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Configure Pagefile
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '17'
          components: 'native-image'
      - name: Build testserver
        run: |
          cd testserver
          docker build -t testserver .
      - name: Get release number
        id: get-id
        shell: pwsh
        run: |
          $id='${{github.ref_name}}'.split('/')[1]
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        shell: pwsh
        run: |
          cd BrokerParent
          $id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-windows-with-kafka
        run: |
          del .\BrokerParent\pom.xml
          move .\BrokerParent\build-pom.xml .\BrokerParent\pom.xml
          mvn clean package -Pkafka -Dnative -Dkafka -Dos=windows -D"quarkus.profile"=kafka 
      - name: docker build
        run: |
          cd AllInOneRunner
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=all-in-one-runner-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-all-in-one-runner.exe -t scorpiobroker/all-in-one-runner:windows-kafka-${{steps.get-id.outputs.id}} .
          cd ..
          cd HistoryManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=history-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-history-manager.exe -t scorpiobroker/history-manager:windows-kafka-${{steps.get-id.outputs.id}} .
          cd ..
          cd RegistrySubscriptionManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=registry-subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-registry-subscription-manager.exe -t scorpiobroker/registry-subscription-manager:windows-kafka-${{steps.get-id.outputs.id}} .
          cd ..
          cd RegistryManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=registry-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-registry-manager.exe -t scorpiobroker/registry-manager:windows-kafka-${{steps.get-id.outputs.id}} .
          cd ..
          cd SubscriptionManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-subscription-manager.exe -t scorpiobroker/subscription-manager:windows-kafka-${{steps.get-id.outputs.id}} .
          cd ..
          cd QueryManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=query-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-query-manager.exe -t scorpiobroker/query-manager:windows-kafka-${{steps.get-id.outputs.id}} .
          cd ..
          cd EntityManager
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=entity-manager-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-entity-manager.exe -t scorpiobroker/entity-manager:windows-kafka-${{steps.get-id.outputs.id}} .
      - name: docker tag 
        run: |
          docker tag scorpiobroker/history-manager:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/history-manager:windows-kafka-latest
          docker tag scorpiobroker/registry-subscription-manager:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/registry-subscription-manager:windows-kafka-latest
          docker tag scorpiobroker/registry-manager:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/registry-manager:windows-kafka-latest
          docker tag scorpiobroker/subscription-manager:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/subscription-manager:windows-kafka-latest
          docker tag scorpiobroker/query-manager:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/query-manager:windows-kafka-latest
          docker tag scorpiobroker/entity-manager:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/entity-manager:windows-kafka-latest
          docker tag scorpiobroker/all-in-one-runner:windows-kafka-${{steps.get-id.outputs.id}} scorpiobroker/all-in-one-runner:windows-kafka-latest
      - name: start docker aaio 
        run: |
          docker-compose -f ./compose-files/docker-compose-windows-aaio-kafka-test.yml up &
          sleep 120
      - name: newman action
        uses: matt-ball/newman-action@master
        with:
          collection: api-test.json
          environment: api-test-environment.json
      - name: Stopping Scorpio 
        run: docker-compose -f ./compose-files/docker-compose-windows-aaio-kafka-test.yml down
      - name: docker-login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: docker tag and push
        run: |
          docker push scorpiobroker/history-manager:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/registry-subscription-manager:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/registry-manager:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/subscription-manager:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/query-manager:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/entity-manager:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/all-in-one-runner:windows-kafka-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/history-manager:windows-kafka-latest
          docker push scorpiobroker/registry-subscription-manager:windows-kafka-latest
          docker push scorpiobroker/registry-manager:windows-kafka-latest
          docker push scorpiobroker/subscription-manager:windows-kafka-latest
          docker push scorpiobroker/query-manager:windows-kafka-latest
          docker push scorpiobroker/entity-manager:windows-kafka-latest
          docker push scorpiobroker/all-in-one-runner:windows-kafka-latest
      - name: Create Release ${{steps.get-id.outputs.id}}-windows-kafka
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-windows-kafka
          release_name: ${{steps.get-id.outputs.id}}-windows-kafka
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release aaio
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./AllInOneRunner/target/all-in-one-runner-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-all-in-one-runner.exe
          asset_content_type: application/octet-stream
      - name: Upload Release history-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryManager/target/history-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-history-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release registry-subscription-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistrySubscriptionManager/target/registry-subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-registry-subscription-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release registry-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistryManager/target/registry-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-registry-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release subscription-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SubscriptionManager/target/subscription-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-subscription-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release query-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./QueryManager/target/query-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-query-manager.exe
          asset_content_type: application/octet-stream
      - name: Upload Release entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./EntityManager/target/entity-manager-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-entity-manager.exe
          asset_content_type: application/octet-stream
  build-windows-aaio:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Configure Pagefile
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '17'
          components: 'native-image'
      - name: Build testserver
        run: |
          cd testserver
          docker build -t testserver .
      - name: Get release number
        id: get-id
        shell: pwsh
        run: |
          $id='${{github.ref_name}}'.split('/')[1]
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        shell: pwsh
        run: |
          cd BrokerParent
          $id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-windows-aio
        run: |
          del .\BrokerParent\pom.xml
          move .\BrokerParent\build-pom.xml .\BrokerParent\pom.xml
          mvn clean package -Dnative -Din-memory -Pin-memory -Dos=windows -D"quarkus.profile"=in-memory 
      - name: docker build
        run: |
          cd AllInOneRunner
          copy .\src\main\resources\dockerfiles\dockerfile-windows .\dockerfile
          docker build --build-arg FILE_BUILD=all-in-one-runner-${{steps.get-build-id.outputs.id}}-runner.exe --build-arg FILE_RUN=scorpio-all-in-one-runner.exe -t scorpiobroker/all-in-one-runner:windows-${{steps.get-id.outputs.id}} .
      - name: docker tag
        run: |
          docker tag scorpiobroker/all-in-one-runner:windows-${{steps.get-id.outputs.id}} scorpiobroker/all-in-one-runner:windows-latest
      - name: start docker aaio 
        run: |
          docker-compose -f ./compose-files/docker-compose-windows-aaio-test.yml up &
          sleep 120
      - name: newman action
        uses: matt-ball/newman-action@master
        with:
          collection: api-test.json
          environment: api-test-environment.json
      - name: Stopping Scorpio 
        run: docker-compose -f ./compose-files/docker-compose-windows-aaio-test.yml down 
      - name: docker-login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: docker push
        run: |
          docker push scorpiobroker/all-in-one-runner:windows-${{steps.get-id.outputs.id}}
          docker push scorpiobroker/all-in-one-runner:windows-latest
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-windows
          release_name: ${{steps.get-id.outputs.id}}-windows
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: AllInOneRunner/target/all-in-one-runner-${{steps.get-build-id.outputs.id}}-runner.exe
          asset_name: scorpio-all-in-one-runner.exe
          asset_content_type: application/octet-stream
